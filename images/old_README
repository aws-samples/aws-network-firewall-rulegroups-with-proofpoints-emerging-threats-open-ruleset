# Always use latest code from this repo : https://gitlab.aws.dev/pandrel/security_aod

## Security AoD Artifact 
This SAM template deploys Cloudformation stack that will Schedule, Download, parse and import Emerging threat rules from Open-sourced Suricata Rules into AWS Network Firewall RuleGroups

**Suricata** is a rule-based ID/PS engine that utilizes externally developed rule sets to monitor network traffic and provide alerts to the system administrator when suspicious events occur. 

**AWS Network Firewall** is a managed service that makes it easy to deploy essential network protections for all of your Amazon Virtual Private Clouds (VPCs). AWS Network Firewall’s flexible rules engine lets you define firewall rules that give you fine-grained control over network traffic, such as blocking outbound Server Message Block (SMB) requests to prevent the spread of malicious activity. You can also import rules you’ve already written in common open source rule formats as well as enable integrations with managed intelligence feeds sourced by AWS partners. AWS Network Firewall works together with AWS Firewall Manager so you can build policies based on AWS Network Firewall rules and then centrally apply those policies across your VPCs and accounts.

AWS Network Firewall stateful rules are Suricata compatible. Most Suricata rules work out of the box with Network Firewall. Your use of Suricata rules with Network Firewall has the restrictions and caveats listed in the limitations section.

## Solution Overview

ET Labs an opensource community backed by Proofpoint publishes Emerging Threats as Suricata Rules once daily on weekdays, and occasionally with out of band updates. This solution automates downloading these Surcata ET rules, parse, validate and drop rules incompatible with AWS Network firewall and create/update Network Firewall Rulegroups. The automation is triggered every 6 hrs, checks if there is any ruleset version update. The entire process is executed only if there is any version update. The solution also manages RuleGroup capacity. 


## Resources deployed with the SAM template
* **S3 Bucket** : Stores Pre and Post processed Suricata rule files. 
* **Lambda Function - ANFSuricataRulesDownloader** : Downloads, extracts Suricata Ruleset from https://rules.emergingthreats.net/open/suricata-{{VERSION}}/emerging.rules.tar.gz  into the S3 bucket. Triggered on a Cloudwatch Scheduled Event every 6 hrs (can be changed)
* **Lambda Function - ANFSuricataRulesProcessor** : Parses Suricata Rules file, drops invalid rules and creates final rules file. Based on the # of rules, defines rulegroup capacity and creates rulesgroups. If rulegroup already exists updates the existing rulegroup with updated rules. Triggered on each file extracted by the downloader script (File named emerging-*.rules are processed)
* **Lambda Function - ANFSuricataRuleGroupSummaryReport** : Provides a summary report of all imported Suricata Rulegroups and their capacity. Triggered manually when needed. 
* **SSM Parameter - SuricataRulesetUpdateCheck** : Stores the current suricata ruleset verion from https://rules.emergingthreats.net/version.txt.
* Addtional associated resources - IAM Roles, CW Events etc. 
* **Note**: This Deployment does not create Network Firewall or Network firewall policies. It assumes you already have an existing network firewall and policy attached to the firewall. The rulegroups created by this automation would have to be manually associated with network firewall once. 

## Installation

# Requirements
* [AWS SAM CLI](https://github.com/awslabs/aws-sam-cli)
* Python3.8
* Increase Service Limit for Number of Network firewall RuleGroups per account from 50 to 100. 

# Instructions

From a terminal session with [AWS CLI](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html)

* Clone this repo
* Deploy SAM template
```
sam build
sam deploy --guided
```

# Initial Manual Run and Verification

* Login to AWS Management Console
* Invoke the ANFSuricataRulesDownloader manually. By default this function will trigger every 6 hrs.
* Goto VPC Service > AWS Network Firewall > Network Firewall rule groups  and validate the rulegroups created. 
* To validate associate the rulegroups to you network firewall policies attached to the network firewall. 

# Troubleshooting

* The parser lambda function stores the processed files and error files in s3 bucket. Analyse the S3 bucket folders under proccessed files for troubleshooting failed/dropped rules. 
* Cloudwatch logs to troubleshoot if errors encountered during creating/udpating rulegroups. 
* If you have to run the downloader manually for any troubleshooting, change the SSM parameter "SuricataRulesetUpdateCheck" value to anything lower than current version or simply set to 1.

# Limitations

[Limitations and caveats for stateful rules in AWS Network Firewall](https://docs.aws.amazon.com/network-firewall/latest/developerguide/suricata-limitations-caveats.html)

**Not supported**

The following Suricata features are not supported by Network Firewall:  


* IP reputation. The iprep keyword is not allowed.
* Lua scripting.
* GeoIP.
* File extraction. File keywords aren't allowed.
* ENIP/CIP keywords.
* Datasets. The keywords dataset and datarep aren't allowed.
* Rules actions except for pass, drop, and alert. Pass, drop, and alert are supported. For additional information about stateful rule actions, see Stateful actions.

**Supported with caveats**

The following Suricata features have caveats for use with Network Firewall:

* To create a rule that requires a variable, you must specify the variable in the rule group. Without the required variables, the rule group isn't valid. For an example of a rule group that's configured with variables, see Rule with variables.
* In payload keywords, the pcre keyword is only allowed with the content keyword.

# Additional limitations/issues

* [AWS Network Firewall quotas](https://docs.aws.amazon.com/network-firewall/latest/developerguide/quotas.html)
* Suricata rules have various options within a single ruleset. Once such option is [flowbits](https://suricata.readthedocs.io/en/suricata-6.0.0/rules/flow-keywords.html#:~:text=Flowbits%20can%20make%20sure%20an,generated%20when%20both%20packets%20match.&text=Flowbits%20marks%20the%20flow%20if,second%20packet%20matches%20as%20well).


    **flowbits: set, name**

    Will set the condition/’name’, if present, in the flow.

    **flowbits: isset, name**

    Can be used in the rule to make sure it generates an alert when the rule matches and the condition is set in the flow.

    for flowbits:isset to work flowbits:set must have been set for the 'name' within the same rulestring/rulegroup in AWS Network firewall. Some rule files does not have flowbits:set which is causing entire rulegroup update. Until an appropriate solution is found droping all rules with flowbits:isset keyword.

* Maximum size of a Suricata-compatible rules string for a rule group, in bytes is 1000000. Some of the rule files contain more than 3000 rules, which is causing the rulestring to exceed the char limit per rulegroup. To avoid this issue, spliting files with more than 1000 rules into multiple rulefiles of 1000 valid rules. 


